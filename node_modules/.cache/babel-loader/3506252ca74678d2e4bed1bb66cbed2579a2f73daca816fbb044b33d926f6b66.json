{"ast":null,"code":"var _jsxFileName = \"/Users/isaiahjones/Desktop/todo-list/src/components/PomodoroTimerV2.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\n// Timer properties\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 6\n};\n\n// Render the time in a specific format\nconst renderTime = time => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"time-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time\",\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\n// Get time in minutes and seconds for the timer\nconst getTimeMinutes = time => Math.floor(time / 60);\nconst getTimeSeconds = time => time % 60;\nexport default function App() {\n  _s();\n  const [isWorkTime, setIsWorkTime] = useState(true); // To track if it's work or break time\n  const [key, setKey] = useState(0); // Key to reset the timer\n\n  // Duration for work and break periods in seconds\n  const workDuration = 25 * 60;\n  const breakDuration = 5 * 60;\n\n  // Colors for the timer\n  const workColor = \"#EF798A\";\n  const breakColor = \"#218380\";\n\n  // Start a new work or break period\n  const startNewPeriod = isWork => {\n    setIsWorkTime(isWork);\n    setKey(prevKey => prevKey + 1); // Increment key to reset the timer\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_createElement(CountdownCircleTimer, {\n      ...timerProps,\n      colors: isWorkTime ? workColor : breakColor,\n      duration: isWorkTime ? workDuration : breakDuration,\n      key: key,\n      onComplete: () => {\n        // When a period is complete, switch to the other period\n        startNewPeriod(!isWorkTime);\n        return {\n          shouldRepeat: true\n        }; // Repeat the countdown for the next period\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, ({\n      elapsedTime\n    }) => renderTime(`${getTimeMinutes(elapsedTime).toString().padStart(2, '0')}:${getTimeSeconds(elapsedTime).toString().padStart(2, '0')}`)), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isWorkTime ? 'Work Time' : 'Break Time'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bLyyvpDFDKV1GpYLTTagBqqLn+s=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CountdownCircleTimer","jsxDEV","_jsxDEV","createElement","_createElement","timerProps","isPlaying","size","strokeWidth","renderTime","time","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getTimeMinutes","Math","floor","getTimeSeconds","App","_s","isWorkTime","setIsWorkTime","key","setKey","workDuration","breakDuration","workColor","breakColor","startNewPeriod","isWork","prevKey","colors","duration","onComplete","shouldRepeat","__self","__source","elapsedTime","toString","padStart","_c","$RefreshReg$"],"sources":["/Users/isaiahjones/Desktop/todo-list/src/components/PomodoroTimerV2.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\n\n// Timer properties\nconst timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 6\n};\n\n// Render the time in a specific format\nconst renderTime = (time) => {\n  return (\n    <div className=\"time-wrapper\">\n      <div className=\"time\">{time}</div>\n    </div>\n  );\n};\n\n// Get time in minutes and seconds for the timer\nconst getTimeMinutes = (time) => Math.floor(time / 60);\nconst getTimeSeconds = (time) => time % 60;\n\nexport default function App() {\n  const [isWorkTime, setIsWorkTime] = useState(true); // To track if it's work or break time\n  const [key, setKey] = useState(0); // Key to reset the timer\n\n  // Duration for work and break periods in seconds\n  const workDuration = 25 * 60;\n  const breakDuration = 5 * 60;\n\n  // Colors for the timer\n  const workColor = \"#EF798A\";\n  const breakColor = \"#218380\";\n\n  // Start a new work or break period\n  const startNewPeriod = (isWork) => {\n    setIsWorkTime(isWork);\n    setKey(prevKey => prevKey + 1); // Increment key to reset the timer\n  };\n\n  return (\n    <div className=\"App\">\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={isWorkTime ? workColor : breakColor}\n        duration={isWorkTime ? workDuration : breakDuration}\n        key={key}\n        onComplete={() => {\n          // When a period is complete, switch to the other period\n          startNewPeriod(!isWorkTime);\n          return { shouldRepeat: true }; // Repeat the countdown for the next period\n        }}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\n            `${getTimeMinutes(elapsedTime).toString().padStart(2, '0')}:${getTimeSeconds(elapsedTime).toString().padStart(2, '0')}`\n          )\n        }\n      </CountdownCircleTimer>\n      \n      <div>{isWorkTime ? 'Work Time' : 'Break Time'}</div>\n      \n      {/* You can add control buttons here if you need them */}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
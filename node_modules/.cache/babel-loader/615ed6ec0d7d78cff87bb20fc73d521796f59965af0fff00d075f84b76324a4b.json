{"ast":null,"code":"var _jsxFileName = \"/Users/isaiahjones/Desktop/todo-list/src/components/PomodoroTimer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PomodoroTimer = () => {\n  _s();\n  // Define the default work time and break time in minutes\n  const workTime = 1;\n  const breakTime = 5;\n\n  // States for minutes, seconds, and a flag to indicate if the timer is running\n  const [minutes, setMinutes] = useState(workTime);\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n\n  // Start the timer\n  const startTimer = () => {\n    setIsActive(true);\n  };\n\n  // Pause the timer\n  const pauseTimer = () => {\n    setIsActive(false);\n  };\n\n  // Reset the timer to the initial state\n  const resetTimer = () => {\n    setIsActive(false);\n    setMinutes(workTime);\n    setSeconds(0);\n  };\n\n  // Effect to handle the countdown\n  useEffect(() => {\n    let interval = null;\n    if (isActive) {\n      interval = setInterval(() => {\n        // Decrement seconds, and handle minute and second reset logic\n        setSeconds(seconds => {\n          if (seconds === 0) {\n            setMinutes(minutes => {\n              if (minutes === 0) {\n                // Time's up, could switch to break time or reset\n                pauseTimer(); // Or setMinutes(breakTime) to start the break\n                return workTime; // Reset to work time for the next session\n              } else {\n                return minutes - 1;\n              }\n            });\n            return 59;\n          } else {\n            return seconds - 1;\n          }\n        });\n      }, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(interval);\n  }, [isActive, seconds]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pomodoro-timer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pomodoro-timer-display\",\n      children: [String(minutes).padStart(2, '0'), \":\", String(seconds).padStart(2, '0')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"timer-btn\",\n      onClick: startTimer,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"timer-btn\",\n      onClick: pauseTimer,\n      children: \"Pause\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"timer-btn\",\n      onClick: resetTimer,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(PomodoroTimer, \"C0eP5Gq4TZxvDqnf9ylKh77yVsA=\");\n_c = PomodoroTimer;\nexport default PomodoroTimer;\nvar _c;\n$RefreshReg$(_c, \"PomodoroTimer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PomodoroTimer","_s","workTime","breakTime","minutes","setMinutes","seconds","setSeconds","isActive","setIsActive","startTimer","pauseTimer","resetTimer","interval","setInterval","clearInterval","className","children","String","padStart","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/isaiahjones/Desktop/todo-list/src/components/PomodoroTimer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst PomodoroTimer = () => {\n  // Define the default work time and break time in minutes\n  const workTime = 1;\n  const breakTime = 5;\n\n  // States for minutes, seconds, and a flag to indicate if the timer is running\n  const [minutes, setMinutes] = useState(workTime);\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n\n  // Start the timer\n  const startTimer = () => {\n    setIsActive(true);\n  };\n\n  // Pause the timer\n  const pauseTimer = () => {\n    setIsActive(false);\n  };\n\n  // Reset the timer to the initial state\n  const resetTimer = () => {\n    setIsActive(false);\n    setMinutes(workTime);\n    setSeconds(0);\n  };\n\n  // Effect to handle the countdown\n  useEffect(() => {\n    let interval = null;\n\n    if (isActive) {\n      interval = setInterval(() => {\n        // Decrement seconds, and handle minute and second reset logic\n        setSeconds((seconds) => {\n          if (seconds === 0) {\n            setMinutes((minutes) => {\n              if (minutes === 0) {\n                // Time's up, could switch to break time or reset\n                pauseTimer(); // Or setMinutes(breakTime) to start the break\n                return workTime; // Reset to work time for the next session\n              } else {\n                return minutes - 1;\n              }\n            });\n            return 59;\n          } else {\n            return seconds - 1;\n          }\n        });\n      }, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(interval);\n  }, [isActive, seconds]);\n\n  return (\n    <div className=\"pomodoro-timer-container\">\n      <div className=\"pomodoro-timer-display\">\n        {String(minutes).padStart(2, '0')}:{String(seconds).padStart(2, '0')}\n      </div>\n      <button className=\"timer-btn\" onClick={startTimer}>Start</button>\n      <button className=\"timer-btn\" onClick={pauseTimer}>Pause</button>\n      <button className=\"timer-btn\" onClick={resetTimer}>Reset</button>\n    </div>\n  );\n};\n\nexport default PomodoroTimer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/isaiahjones/Desktop/todo-list/src/components/PomodoroTimerV2.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst minuteSeconds = 60;\nconst timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 6\n};\nconst renderTime = (dimension, time) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"time-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time\",\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: dimension\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\nconst getTimeMinutes = time => Math.floor(time / minuteSeconds);\nconst getTimeSeconds = time => time % minuteSeconds;\nexport const PomodoroTimerV2 = () => {\n  _s();\n  const pomodoroTime = 25 * minuteSeconds; // 25 minutes for work\n  const shortBreakTime = 5 * minuteSeconds; // 5 minutes for a short break\n\n  const [key, setKey] = useState(0);\n  const [isWorkTime, setIsWorkTime] = useState(true); // Start with work time\n\n  // Function to handle completion of the timer\n  const onComplete = () => {\n    // Switch between work and break times\n    setIsWorkTime(!isWorkTime);\n    // Increment key to reset the timer\n    setKey(prevKey => prevKey + 1);\n    // Continue the timer without delay\n    return {\n      shouldRepeat: true,\n      delay: 0\n    };\n  };\n  const duration = isWorkTime ? pomodoroTime : shortBreakTime;\n  const color = isWorkTime ? \"#7E2E84\" : \"#218380\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pomodoro-timer-container2\",\n    children: [/*#__PURE__*/_createElement(CountdownCircleTimer, {\n      ...timerProps,\n      colors: color,\n      duration: duration,\n      key: key,\n      onComplete: onComplete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, ({\n      elapsedTime\n    }) => {\n      const remainingTime = duration - elapsedTime;\n      const minutes = getTimeMinutes(remainingTime);\n      const seconds = getTimeSeconds(remainingTime);\n      return renderTime(minutes + \":\" + seconds.toString().padStart(2, '0'));\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isWorkTime ? 'Work Time' : 'Break Time'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(PomodoroTimerV2, \"i8vmfD7OflJnir3wwg3Y35DYJhM=\");\n_c = PomodoroTimerV2;\nvar _c;\n$RefreshReg$(_c, \"PomodoroTimerV2\");","map":{"version":3,"names":["React","useState","CountdownCircleTimer","jsxDEV","_jsxDEV","createElement","_createElement","minuteSeconds","timerProps","isPlaying","size","strokeWidth","renderTime","dimension","time","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getTimeMinutes","Math","floor","getTimeSeconds","PomodoroTimerV2","_s","pomodoroTime","shortBreakTime","key","setKey","isWorkTime","setIsWorkTime","onComplete","prevKey","shouldRepeat","delay","duration","color","colors","__self","__source","elapsedTime","remainingTime","minutes","seconds","toString","padStart","_c","$RefreshReg$"],"sources":["/Users/isaiahjones/Desktop/todo-list/src/components/PomodoroTimerV2.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\nconst minuteSeconds = 60;\n\nconst timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 6,\n};\n\nconst renderTime = (dimension, time) => {\n  return (\n    <div className=\"time-wrapper\">\n      <div className=\"time\">{time}</div>\n      <div>{dimension}</div>\n    </div>\n  );\n};\n\nconst getTimeMinutes = (time) => Math.floor(time / minuteSeconds);\nconst getTimeSeconds = (time) => time % minuteSeconds;\n\nexport const PomodoroTimerV2 = () => {\n  const pomodoroTime = 25 * minuteSeconds; // 25 minutes for work\n  const shortBreakTime = 5 * minuteSeconds; // 5 minutes for a short break\n\n  const [key, setKey] = useState(0);\n  const [isWorkTime, setIsWorkTime] = useState(true); // Start with work time\n\n  // Function to handle completion of the timer\n  const onComplete = () => {\n    // Switch between work and break times\n    setIsWorkTime(!isWorkTime);\n    // Increment key to reset the timer\n    setKey((prevKey) => prevKey + 1);\n    // Continue the timer without delay\n    return { shouldRepeat: true, delay: 0 };\n  };\n\n  const duration = isWorkTime ? pomodoroTime : shortBreakTime;\n  const color = isWorkTime ? \"#7E2E84\" : \"#218380\";\n\n  return (\n    <div className=\"pomodoro-timer-container2\">\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={color}\n        duration={duration}\n        key={key}\n        onComplete={onComplete}\n      >\n        {({ elapsedTime }) => {\n          const remainingTime = duration - elapsedTime;\n          const minutes = getTimeMinutes(remainingTime);\n          const seconds = getTimeSeconds(remainingTime);\n          return renderTime(minutes + \":\" + seconds.toString().padStart(2, '0'));\n        }}\n      </CountdownCircleTimer>\n\n      <div>{isWorkTime ? 'Work Time' : 'Break Time'}</div>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}